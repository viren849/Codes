class Solution {
public:
   
    int dp[2001][2001];
    int help(int i,int j,string &s,string &p)
    {
        if(i < 0 and j < 0 )return 1 ;
        
        if(i < 0 and j>=0)
        {
            for(int k=j;k>=0;k--)
                if(p[k]!='*') return 0;
            return 1;
        } 
        
        if(j < 0 && i>=0) return 0;
        
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        if(s[i]==p[j] || p[j]=='?' )
            return dp[i][j]=help(i-1,j-1,s,p);
        
        else if(p[j] == '*')
            return dp[i][j]= (help(i-1,j,s,p) || help(i,j-1,s,p));
        
        return dp[i][j]=0;    
    }
    bool isMatch(string s, string p) {
       
        memset(dp,-1,sizeof(dp));
        int n=s.size();
        int m=p.size();
        if (n > 30000) return false;
     return help(n-1,m-1,s,p);   
    }
};

class Solution {
public:
   
    
    bool isMatch(string s, string p) {
       
        int m=s.size();
        int n=p.size();
        
        bool dp[n+1][m+1];
        
        dp[0][0]=true;
        
        for(int j=1;j<=m;j++)
            dp[0][j]=false;
        for(int i=1;i<=n;i++)
        {
            bool f1=true;
            for(int k=1;k<=i;k++)
                if(p[k-1]!='*')
                {
                    f1=false;
                    break;
                }
            dp[i][0]=f1;
        }
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                 if(p[i-1]==s[j-1] || p[i-1] =='?')
                     dp[i][j]=dp[i-1][j-1];
                else if(p[i-1] =='*')
                    dp[i][j]=dp[i-1][j] | dp[i][j-1];
                else dp[i][j]=false;
            }
        }
        return dp[n][m];
    }
};